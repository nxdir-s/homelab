---
apiVersion: v1
kind: Namespace
metadata:
  name: postgresql
---
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: k3spi-postgres
  namespace: postgresql
spec:
  description: "k3spi postgres cluster"
  imageName: ghcr.io/cloudnative-pg/postgresql:17.5
  instances: 3
  startDelay: 300
  stopDelay: 300
  primaryUpdateStrategy: supervised

  postgresql:
    parameters:
      max_worker_processes: "100"
      shared_buffers: 256MB
      pg_stat_statements.max: "10000"
      pg_stat_statements.track: all
      auto_explain.log_min_duration: "10s"
    # pg_hba:
    #   - host all all all md5

  bootstrap:
    initdb:
      database: app
      owner: app
      # secret:
      #   name: pg-cluster-dev-user
    # Alternative bootstrap method: start from a backup
    #recovery:
    #  backup:
    #    name: backup-example

  enableSuperuserAccess: true
  # superuserSecret:
  #   name: k3spi-postgres-superuser

  storage:
    pvcTemplate:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 50Gi
      storageClassName: pg-longhorn
      volumeMode: Filesystem

  walStorage:
    pvcTemplate:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 5Gi
      storageClassName: pg-longhorn
      volumeMode: Filesystem

  # backup:
  #   barmanObjectStore:
  #     destinationPath: s3://BUCKET_NAME/path/to/folder
  #     s3Credentials:
  #       accessKeyId:
  #         name: pg-backup-creds
  #         key: ACCESS_KEY_ID
  #       secretAccessKey:
  #         name: pg-backup-creds
  #         key: ACCESS_SECRET_KEY
  #     wal:
  #       compression: gzip
  #       encryption: AES256
  #     data:
  #       compression: gzip
  #       encryption: AES256
  #       immediateCheckpoint: false
  #       jobs: 2
  #   retentionPolicy: "30d"

  resources:
    requests:
      memory: "512Mi"
      cpu: "1"

  affinity:
    enablePodAntiAffinity: true
    topologyKey: kubernetes.io/hostname
    podAntiAffinityType: required
    nodeSelector:
      node-role.kubernetes.io/postgres: ""
      node-role.kubernetes.io/cpu: ""

  nodeMaintenanceWindow:
    inProgress: false
    reusePVC: false
